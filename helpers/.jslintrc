{
	"ass"      : true,  // tolerate assignment expressions (`true` if assignment should be allowed outside of statement position)
	"bitwise"  : false, // tolerate bitwise operators (`true` if bitwise operators should be allowed)
	"closure"  : false, // tolerate Google Closure idioms (`true` if Google Closure annotations should be allowed)
	"continue" : false, // tolerate continue (`true` if the continue statement should be allowed)
	"debug"    : false, // tolerate debugger statements (`true` if debugger statements should be allowed)
	"eqeq"     : false, // tolerate == and != (`true` if the == and != operators should be tolerated)
	"evil"     : false, // tolerate eval (`true` if eval should be allowed)
	"forin"    : true,  // tolerate unfiltered for..in (`true` if unfiltered for..in statements should be allowed)
	"newcap"   : false, // tolerate uncapitalized constructors (`true` if initial caps with constructor functions is optional)
	"nomen"    : false, // tolerate dangling _ in identifiers (`true` if names should not be checked for initial or trailing underscores)
	"plusplus" : false, // tolerate ++ and --
	"regexp"   : false, // tolerate . and [^...]. in /RegExp/
	"sloppy"   : true,  // tolerate missing 'use strict' pragma
	"stupid"   : true,  // tolerate stupidity (`true` if blocking/synchronous methods can be used)
	"sub"      : true,  // tolerate inefficient subscripting (`true` if subscript notation may be used for expressions better expressed in dot notation)
	"todo"     : true,  // tolerate TODO comments
	"unparam"  : false, // tolerate unused parameters (`true` if warnings should not be given for unused parameters)
	"vars"     : false, // tolerate many var statements per function (`true` if multiple var statement per function should be allowed)

	"white"    : true,  // tolerate messy white space (`true` if strict whitespace rules should be ignored)
	"indent"   : 4,     // the number of spaces used for indentation
	"maxlen"   : 79,    // the maximum number of characters in a line

	"passfail" : false, // stop on first error
	"maxerr"   : 50,    // the maximum number of warnings reported

	"browser"  : false, // assume a browser	browser	(`true` if the standard browser globals should be predefined)
	"devel"    : false, // assume console, alert, ... (`true` if browser globals that are useful in development should be predefined)
	"couch"    : false, // assume CouchDB (`true` if CouchDB globals should be predefined)
	"node"     : false, // assume Node.js (`true` if Node.js globals should be predefined)
	"rhino"    : false, // assume Rhino (`true` if the Rhino environment globals should be predefined)

	"predef"   : {      // an object whose keys are global variable names, and whose values are booleans that determine if each variable is assignable
	}

}
