{
	"no-cond-assign"            : true,  // disallow assignment in conditional expressions
	"no-console"                : true,  // disallow use of console (off by default in the node environment)
	"no-constant-condition"     : true,  // disallow use of constant expressions in conditions
	"no-comma-dangle"           : true,  // disallow trailing commas in object literals
	"no-control-regex"          : true,  // disallow control characters in regular expressions
	"no-debugger"               : true,  // disallow use of debugger
	"no-dupe-keys"              : true,  // disallow duplicate keys when creating object literals
	"no-empty"                  : true,  // disallow empty statements
	"no-empty-class"            : true,  // disallow the use of empty character classes in regular expressions
	"no-ex-assign"              : true,  // disallow assigning to the exception in a catch block
	"no-extra-boolean-cast"     : true,  // disallow double-negation boolean casts in a boolean context
	"no-extra-parens"           : false, // disallow unnecessary parentheses (off by default)
	"no-extra-semi"             : false, // disallow unnecessary semicolons
	"no-func-assign"            : true,  // disallow overwriting functions written as function declarations
	"no-inner-declarations"     : true,  // disallow function or variable declarations in nested blocks
	"no-invalid-regexp"         : true,  // disallow invalid regular expression strings in the RegExp constructor
	"no-negated-in-lhs"         : true,  // disallow negation of the left operand of an in expression
	"no-obj-calls"              : true,  // disallow the use of object properties of the global object (Math and JSON) as functions
	"no-regex-spaces"           : true,  // disallow multiple spaces in a regular expression literal
	"no-sparse-arrays"          : true,  // disallow sparse arrays
	"no-unreachable"            : true,  // disallow unreachable statements after a return, throw, continue, or break statement
	"use-isnan"                 : true,  // disallow comparisons with the value NaN
	"valid-jsdoc"               : true,  // ensure JSDoc comments are valid (off by default)
	"valid-typeof"              : true,  // ensure that the results of typeof are compared against a valid string

	"block-scoped-var"          : false, // treat var statements as if they were block scoped (off by default)
	"complexity"                : false, // specify the maximum cyclomatic complexity allowed in a program (off by default)
	"consistent-return"         : true,  // require return statements to either always or never specify values
	"curly"                     : true,  // specify curly brace conventions for all control statements
	"default-case"              : true,  // require default case in switch statements (off by default)
	"dot-notation"              : true,  // encourages use of dot notation whenever possible
	"eqeqeq"                    : true,  // require the use of === and !==
	"guard-for-in"              : true,  // make sure for-in loops have an if statement (off by default)
	"no-alert"                  : true,  // disallow the use of alert, confirm, and prompt
	"no-caller"                 : true,  // disallow use of arguments.caller or arguments.callee
	"no-div-regex"              : true,  // disallow division operators explicitly at beginning of regular expression (off by default)
	"no-else-return"            : true,  // disallow else after a return in an if (off by default)
	"no-empty-label"            : true,  // disallow use of labels for anything other then loops and switches
	"no-eq-null"                : true,  // disallow comparisons to null without a type-checking operator (off by default)
	"no-eval"                   : true,  // disallow use of eval()
	"no-extend-native"          : true,  // disallow adding to native types
	"no-fallthrough"            : true,  // disallow fallthrough of case statements
	"no-floating-decimal"       : true,  // disallow the use of leading or trailing decimal points in numeric literals (off by default)
	"no-implied-eval"           : true,  // disallow use of eval()-like methods
	"no-labels"                 : true,  // disallow use of labeled statements
	"no-iterator"               : true,  // disallow usage of __iterator__ property
	"no-lone-blocks"            : true,  // disallow unnecessary nested blocks
	"no-loop-func"              : true,  // disallow creation of functions within loops
	"no-multi-str"              : true,  // disallow use of multiline strings
	"no-native-reassign"        : true,  // disallow reassignments of native objects
	"no-new"                    : true,  // disallow use of new operator when not part of the assignment or comparison
	"no-new-func"               : true,  // disallow use of new operator for Function object
	"no-new-wrappers"           : true,  // disallows creating new instances of String,Number, and Boolean
	"no-octal"                  : true,  // disallow use of octal literals
	"no-octal-escape"           : true,  // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
	"no-proto"                  : true,  // disallow usage of __proto__ property
	"no-redeclare"              : true,  // disallow declaring the same variable more then once
	"no-return-assign"          : true,  // disallow use of assignment in return statement
	"no-script-url"             : true,  // disallow use of javascript: urls.
	"no-self-compare"           : true,  // disallow comparisons where both sides are exactly the same (off by default)
	"no-sequences"              : true,  // disallow use of comma operator
	"no-unused-expressions"     : true,  // disallow usage of expressions in statement position
	"no-warning-comments"       : true,  // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME (off by default)
	"no-with"                   : true,  // disallow use of the with statement
	"radix"                     : true,  // require use of the second argument for parseInt() (off by default)
	"wrap-iife"                 : true,  // require immediate function invocation to be wrapped in parentheses (off by default)
	"yoda"                      : false, // require or disallow Yoda conditions

	"no-global-strict"          : true,  // disallow the "use strict" pragma in the global scope (off by default in the node environment)
	"no-extra-strict"           : true,  // disallow unnecessary use of "use strict"; when already in strict mode
	"strict"                    : true,  // require that all functions are run in strict mode

	"no-catch-shadow"           : true,  // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
	"no-delete-var"             : true,  // disallow deletion of variables
	"no-label-var"              : true,  // disallow labels that share a name with a variable
	"no-shadow"                 : true,  // disallow declaration of variables already declared in the outer scope
	"no-shadow-restricted-names": true,  // disallow shadowing of names such as arguments
	"no-undef"                  : true,  // disallow use of undeclared variables unless mentioned in a /*global */ block
	"no-undefined"              : true,  // disallow use of undefined variable (off by default)
	"no-undef-init"             : true,  // disallow use of undefined when initializing variables
	"no-unused-vars"            : true,  // disallow declaration of variables that are not used in the code
	"no-use-before-define"      : false, // disallow use of variables before they are defined

	"handle-callback-err"       : false, // enforces error handling in callbacks (off by default) (on by default in the node environment)
	"no-mixed-requires"         : false, // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
	"no-new-require"            : false, // disallow use of new operator with the require function (off by default) (on by default in the node environment)
	"no-path-concat"            : false, // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
	"no-process-exit"           : false, // disallow process.exit() (on by default in the node environment)
	"no-restricted-modules"     : false, // restrict usage of specified node modules (off by default)
	"no-sync"                   : false, // disallow use of synchronous methods (off by default)

	"brace-style"               : true,  // enforce one true brace style (off by default)
	"camelcase"                 : true,  // require camel case names
	"consistent-this"           : true,  // enforces consistent naming when capturing the current execution context (off by default)
	"eol-last"                  : true,  // enforce newline at the end of file, with no multiple empty lines
	"func-names"                : true,  // require function expressions to have a name (off by default)
	"func-style"                : true,  // enforces use of function declarations or expressions (off by default)
	"new-cap"                   : true,  // require a capital letter for constructors
	"new-parens"                : true,  // disallow the omission of parentheses when invoking a contructor with no arguments
	"no-nested-ternary"         : true,  // disallow nested ternary expressions (off by default)
	"no-array-constructor"      : true,  // disallow use of the Array constructor
	"no-lonely-if"              : true,  // disallow if as the only statement in an else block (off by default)
	"no-new-object"             : true,  // disallow use of the Object constructor
	"no-spaced-func"            : true,  // disallow space between function identifier and application
	"no-space-before-semi"      : true,  // disallow space before semicolon
	"no-ternary"                : true,  // disallow the use of ternary operators (off by default)
	"no-trailing-spaces"        : true,  // disallow trailing whitespace at the end of lines (off by default)
	"no-underscore-dangle"      : true,  // disallow dangling underscores in identifiers
	"no-wrap-func"              : true,  // disallow wrapping of non-IIFE statements in parens
	"no-mixed-spaces-and-tabs"  : true,  // disallow mixed spaces and tabs for indentation
	"quotes"                    : "double", // specify whether double or single quotes should be used
	"quote-props"               : false, // require quotes around object literal property names (off by default)
	"semi"                      : true,  // require or disallow use of semicolons instead of ASI
	"sort-vars"                 : false, // sort variables within the same declaration block (off by default)
	"space-after-keywords"      : true,  // require a space after certain keywords (off by default)
	"space-in-brackets"         : true,  // require or disallow spaces between brackets (off by default)
	"space-infix-ops"           : true,  // require spaces around operators
	"space-return-throw-case"   : true,  // require a space after return, throw, and case
	"space-unary-word-ops"      : true,  // require a space around word operators such as typeof (off by default)
	"max-nested-callbacks"      : false, // specify the maximum depth callbacks can be nested (off by default)
	"one-var"                   : true,  // allow just one var statement per function (off by default)
	"wrap-regex"                : true,  // require regex literals to be wrapped in parentheses (off by default)

	"max-depth"                 : 4,     // specify the maximum depth that blocks can be nested (off by default)
	"max-len"                   : 79,    // specify the maximum length of a line in your program (off by default)
	"max-params"                : 4,     // limits the number of parameters that can be used in the function declaration. (off by default)
	"max-statements"            : false, // specify the maximum number of statement allowed in a function (off by default)
	"no-bitwise"                : true,  // disallow use of bitwise operators (off by default)
	"no-plusplus"               : true,  // disallow use of unary operators, ++ and -- (off by default)

	"env": {
	},

	"globals"       : {
	},

}
